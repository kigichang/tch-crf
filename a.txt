-------- test forward --------
-------------------- forward:1 --------------------
starts: Parameter containing:
tensor([-0.0958, -0.0838, -0.0998, -0.0567,  0.0658], requires_grad=True)
transitions: Parameter containing:
tensor([[ 0.0186,  0.0086,  0.0116,  0.0276, -0.0708],
        [ 0.0453,  0.0228,  0.0292,  0.0237, -0.0622],
        [ 0.0478, -0.0518, -0.0099, -0.0932, -0.0855],
        [-0.0479,  0.0702, -0.0069,  0.0862,  0.0412],
        [ 0.0668,  0.0480,  0.0736, -0.0466,  0.0364]], requires_grad=True)
ends: Parameter containing:
tensor([ 0.0051, -0.0636, -0.0887, -0.0541, -0.0946], requires_grad=True)
self.batch_first: False
emissions: tensor([[[-1.0815, -1.0964,  0.4902, -0.1495,  1.0123],
         [ 0.4571,  0.3830,  0.0305, -1.8651, -1.3217]],

        [[-0.4570, -0.3757, -1.2726, -0.3914,  1.0987],
         [-2.0027,  0.8384, -1.2015, -1.9222,  1.1583]],

        [[ 1.1398, -1.4247,  1.4649,  0.5058,  0.9214],
         [ 0.1536, -1.2564, -0.6121,  0.2406, -1.0176]]])
tags: tensor([[0, 1],
        [2, 4],
        [3, 1]])
mask: tensor([[1, 1],
        [1, 1],
        [1, 1]], dtype=torch.uint8)
reduction: sum
-------------------- compute score --------------------
starts: Parameter containing:
tensor([-0.0958, -0.0838, -0.0998, -0.0567,  0.0658], requires_grad=True)
transitions: Parameter containing:
tensor([[ 0.0186,  0.0086,  0.0116,  0.0276, -0.0708],
        [ 0.0453,  0.0228,  0.0292,  0.0237, -0.0622],
        [ 0.0478, -0.0518, -0.0099, -0.0932, -0.0855],
        [-0.0479,  0.0702, -0.0069,  0.0862,  0.0412],
        [ 0.0668,  0.0480,  0.0736, -0.0466,  0.0364]], requires_grad=True)
ends: Parameter containing:
tensor([ 0.0051, -0.0636, -0.0887, -0.0541, -0.0946], requires_grad=True)
emissions: tensor([[[-1.0815, -1.0964,  0.4902, -0.1495,  1.0123],
         [ 0.4571,  0.3830,  0.0305, -1.8651, -1.3217]],

        [[-0.4570, -0.3757, -1.2726, -0.3914,  1.0987],
         [-2.0027,  0.8384, -1.2015, -1.9222,  1.1583]],

        [[ 1.1398, -1.4247,  1.4649,  0.5058,  0.9214],
         [ 0.1536, -1.2564, -0.6121,  0.2406, -1.0176]]])
tags: tensor([[0, 1],
        [2, 4],
        [3, 1]])
mask: tensor([[1, 1],
        [1, 1],
        [1, 1]], dtype=torch.uint8)
score: tensor([-0.0958, -0.0838], grad_fn=<IndexBackward0>)
score: tensor([-1.1772,  0.2992], grad_fn=<AddBackward0>)
tags[i - 1]: tensor([0, 1])
tags[i]: tensor([2, 4])
transitions[tags[i - 1], tags[i]] tensor([ 0.0116, -0.0622], grad_fn=<IndexBackward0>)
mask[i]: tensor([1., 1.])
score: tensor([-1.1657,  0.2370], grad_fn=<AddBackward0>)
emissions[i, torch.arange(batch_size), tags[i]] tensor([-1.2726,  1.1583])
score: tensor([-2.4382,  1.3953], grad_fn=<AddBackward0>)
tags[i - 1]: tensor([2, 4])
tags[i]: tensor([3, 1])
transitions[tags[i - 1], tags[i]] tensor([-0.0932,  0.0480], grad_fn=<IndexBackward0>)
mask[i]: tensor([1., 1.])
score: tensor([-2.5315,  1.4433], grad_fn=<AddBackward0>)
emissions[i, torch.arange(batch_size), tags[i]] tensor([ 0.5058, -1.2564])
score: tensor([-2.0257,  0.1869], grad_fn=<AddBackward0>)
seq_ends: tensor([2, 2])
last_tags: tensor([3, 1])
self.end_transitions[last_tags] tensor([-0.0541, -0.0636], grad_fn=<IndexBackward0>)
score: tensor([-2.0798,  0.1233], grad_fn=<AddBackward0>)
-------------------- compute normalizer --------------------
starts: Parameter containing:
tensor([-0.0958, -0.0838, -0.0998, -0.0567,  0.0658], requires_grad=True)
transitions: Parameter containing:
tensor([[ 0.0186,  0.0086,  0.0116,  0.0276, -0.0708],
        [ 0.0453,  0.0228,  0.0292,  0.0237, -0.0622],
        [ 0.0478, -0.0518, -0.0099, -0.0932, -0.0855],
        [-0.0479,  0.0702, -0.0069,  0.0862,  0.0412],
        [ 0.0668,  0.0480,  0.0736, -0.0466,  0.0364]], requires_grad=True)
ends: Parameter containing:
tensor([ 0.0051, -0.0636, -0.0887, -0.0541, -0.0946], requires_grad=True)
emissions: tensor([[[-1.0815, -1.0964,  0.4902, -0.1495,  1.0123],
         [ 0.4571,  0.3830,  0.0305, -1.8651, -1.3217]],

        [[-0.4570, -0.3757, -1.2726, -0.3914,  1.0987],
         [-2.0027,  0.8384, -1.2015, -1.9222,  1.1583]],

        [[ 1.1398, -1.4247,  1.4649,  0.5058,  0.9214],
         [ 0.1536, -1.2564, -0.6121,  0.2406, -1.0176]]])
mask: tensor([[1, 1],
        [1, 1],
        [1, 1]], dtype=torch.uint8)
score: tensor([[-1.1772, -1.1802,  0.3904, -0.2062,  1.0780],
        [ 0.3614,  0.2992, -0.0693, -1.9218, -1.2559]], grad_fn=<AddBackward0>)
broadcast_score: tensor([[[-1.1772],
         [-1.1802],
         [ 0.3904],
         [-0.2062],
         [ 1.0780]],

        [[ 0.3614],
         [ 0.2992],
         [-0.0693],
         [-1.9218],
         [-1.2559]]], grad_fn=<UnsqueezeBackward0>)
broadcast_emissions: tensor([[[-0.4570, -0.3757, -1.2726, -0.3914,  1.0987]],

        [[-2.0027,  0.8384, -1.2015, -1.9222,  1.1583]]])
next_score: tensor([[[-1.6157, -1.5444, -2.4382, -1.5410, -0.1493],
         [-1.5919, -1.5331, -2.4236, -1.5479, -0.1437],
         [-0.0189, -0.0371, -0.8921, -0.0942,  1.4036],
         [-0.7111, -0.5118, -1.4856, -0.5114,  0.9337],
         [ 0.6879,  0.7503, -0.1210,  0.6400,  2.2131]],

        [[-1.6227,  1.2083, -0.8286, -1.5332,  1.4490],
         [-1.6582,  1.1603, -0.8732, -1.5994,  1.3953],
         [-2.0242,  0.7173, -1.2808, -2.0847,  1.0035],
         [-3.9724, -1.0133, -3.1302, -3.7578, -0.7223],
         [-3.1918, -0.3696, -2.3839, -3.2247, -0.0612]]],
       grad_fn=<AddBackward0>)
next_score: tensor([[ 1.3518,  1.4134,  0.5295,  1.3437,  2.8613],
        [-0.5450,  2.2661,  0.2374, -0.5020,  2.5217]],
       grad_fn=<LogsumexpBackward0>)
score: tensor([[-1.1772, -1.1802,  0.3904, -0.2062,  1.0780],
        [ 0.3614,  0.2992, -0.0693, -1.9218, -1.2559]], grad_fn=<AddBackward0>)
mask[i].unsqueeze(1): tensor([[1],
        [1]], dtype=torch.uint8)
score: tensor([[ 1.3518,  1.4134,  0.5295,  1.3437,  2.8613],
        [-0.5450,  2.2661,  0.2374, -0.5020,  2.5217]],
       grad_fn=<WhereBackward0>)
broadcast_score: tensor([[[ 1.3518],
         [ 1.4134],
         [ 0.5295],
         [ 1.3437],
         [ 2.8613]],

        [[-0.5450],
         [ 2.2661],
         [ 0.2374],
         [-0.5020],
         [ 2.5217]]], grad_fn=<UnsqueezeBackward0>)
broadcast_emissions: tensor([[[ 1.1398, -1.4247,  1.4649,  0.5058,  0.9214]],

        [[ 0.1536, -1.2564, -0.6121,  0.2406, -1.0176]]])
next_score: tensor([[[ 2.5102, -0.0644,  2.8282,  1.8851,  2.2024],
         [ 2.5985,  0.0115,  2.9075,  1.9428,  2.2726],
         [ 1.7171, -0.9470,  1.9845,  0.9420,  1.3654],
         [ 2.4356, -0.0109,  2.8017,  1.9356,  2.3063],
         [ 4.0680,  1.4846,  4.3998,  3.3205,  3.8191]],

        [[-0.3728, -1.7928, -1.1455, -0.2768, -1.6333],
         [ 2.4650,  1.0325,  1.6832,  2.5303,  1.1864],
         [ 0.4388, -1.0707, -0.3846,  0.3848, -0.8656],
         [-0.3963, -1.6883, -1.1210, -0.1753, -1.4784],
         [ 2.7421,  1.3132,  1.9831,  2.7156,  1.5405]]],
       grad_fn=<AddBackward0>)
next_score: tensor([[4.6169, 2.0464, 4.9446, 3.9266, 4.3602],
        [3.4077, 1.9769, 2.6371, 3.4255, 2.1732]],
       grad_fn=<LogsumexpBackward0>)
score: tensor([[ 1.3518,  1.4134,  0.5295,  1.3437,  2.8613],
        [-0.5450,  2.2661,  0.2374, -0.5020,  2.5217]],
       grad_fn=<WhereBackward0>)
mask[i].unsqueeze(1): tensor([[1],
        [1]], dtype=torch.uint8)
score: tensor([[4.6169, 2.0464, 4.9446, 3.9266, 4.3602],
        [3.4077, 1.9769, 2.6371, 3.4255, 2.1732]], grad_fn=<WhereBackward0>)
score: tensor([[4.6221, 1.9828, 4.8559, 3.8725, 4.2655],
        [3.4128, 1.9133, 2.5484, 3.3714, 2.0785]], grad_fn=<AddBackward0>)
result: tensor([5.8770, 4.4662], grad_fn=<LogsumexpBackward0>)
-------------------- forward:2 --------------------
numerator: tensor([-2.0798,  0.1233], grad_fn=<AddBackward0>)
denominator: tensor([5.8770, 4.4662], grad_fn=<LogsumexpBackward0>)
llh: tensor([-7.9568, -4.3429], grad_fn=<SubBackward0>)
llh.sum(): tensor(-12.2997, grad_fn=<SumBackward0>)
tensor(-12.2997, grad_fn=<SumBackward0>)
-------- test decode --------
-------------------- viterbi decode --------------------
starts: Parameter containing:
tensor([-0.0958, -0.0838, -0.0998, -0.0567,  0.0658], requires_grad=True)
transitions: Parameter containing:
tensor([[ 0.0186,  0.0086,  0.0116,  0.0276, -0.0708],
        [ 0.0453,  0.0228,  0.0292,  0.0237, -0.0622],
        [ 0.0478, -0.0518, -0.0099, -0.0932, -0.0855],
        [-0.0479,  0.0702, -0.0069,  0.0862,  0.0412],
        [ 0.0668,  0.0480,  0.0736, -0.0466,  0.0364]], requires_grad=True)
ends: Parameter containing:
tensor([ 0.0051, -0.0636, -0.0887, -0.0541, -0.0946], requires_grad=True)
emissions: tensor([[[-1.0815, -1.0964,  0.4902, -0.1495,  1.0123],
         [ 0.4571,  0.3830,  0.0305, -1.8651, -1.3217]],

        [[-0.4570, -0.3757, -1.2726, -0.3914,  1.0987],
         [-2.0027,  0.8384, -1.2015, -1.9222,  1.1583]],

        [[ 1.1398, -1.4247,  1.4649,  0.5058,  0.9214],
         [ 0.1536, -1.2564, -0.6121,  0.2406, -1.0176]]])
mask: tensor([[1, 1],
        [1, 1],
        [1, 1]], dtype=torch.uint8)
score: tensor([[-1.1772, -1.1802,  0.3904, -0.2062,  1.0780],
        [ 0.3614,  0.2992, -0.0693, -1.9218, -1.2559]], grad_fn=<AddBackward0>)
broadcast_score: tensor([[[-1.1772],
         [-1.1802],
         [ 0.3904],
         [-0.2062],
         [ 1.0780]],

        [[ 0.3614],
         [ 0.2992],
         [-0.0693],
         [-1.9218],
         [-1.2559]]], grad_fn=<UnsqueezeBackward0>)
broadcast_emission: tensor([[[-0.4570, -0.3757, -1.2726, -0.3914,  1.0987]],

        [[-2.0027,  0.8384, -1.2015, -1.9222,  1.1583]]])
next_score: tensor([[[-1.6157, -1.5444, -2.4382, -1.5410, -0.1493],
         [-1.5919, -1.5331, -2.4236, -1.5479, -0.1437],
         [-0.0189, -0.0371, -0.8921, -0.0942,  1.4036],
         [-0.7111, -0.5118, -1.4856, -0.5114,  0.9337],
         [ 0.6879,  0.7503, -0.1210,  0.6400,  2.2131]],

        [[-1.6227,  1.2083, -0.8286, -1.5332,  1.4490],
         [-1.6582,  1.1603, -0.8732, -1.5994,  1.3953],
         [-2.0242,  0.7173, -1.2808, -2.0847,  1.0035],
         [-3.9724, -1.0133, -3.1302, -3.7578, -0.7223],
         [-3.1918, -0.3696, -2.3839, -3.2247, -0.0612]]],
       grad_fn=<AddBackward0>)
next_score: tensor([[ 0.6879,  0.7503, -0.1210,  0.6400,  2.2131],
        [-1.6227,  1.2083, -0.8286, -1.5332,  1.4490]], grad_fn=<MaxBackward0>)
indices: tensor([[4, 4, 4, 4, 4],
        [0, 0, 0, 0, 0]])
score: tensor([[ 0.6879,  0.7503, -0.1210,  0.6400,  2.2131],
        [-1.6227,  1.2083, -0.8286, -1.5332,  1.4490]],
       grad_fn=<WhereBackward0>)
broadcast_score: tensor([[[ 0.6879],
         [ 0.7503],
         [-0.1210],
         [ 0.6400],
         [ 2.2131]],

        [[-1.6227],
         [ 1.2083],
         [-0.8286],
         [-1.5332],
         [ 1.4490]]], grad_fn=<UnsqueezeBackward0>)
broadcast_emission: tensor([[[ 1.1398, -1.4247,  1.4649,  0.5058,  0.9214]],

        [[ 0.1536, -1.2564, -0.6121,  0.2406, -1.0176]]])
next_score: tensor([[[ 1.8463, -0.7282,  2.1644,  1.2212,  1.5385],
         [ 1.9354, -0.6516,  2.2443,  1.2797,  1.6095],
         [ 1.0666, -1.5974,  1.3340,  0.2916,  0.7149],
         [ 1.7320, -0.7145,  2.0981,  1.2320,  1.6026],
         [ 3.4198,  0.8364,  3.7516,  2.6723,  3.1709]],

        [[-1.4506, -2.8706, -2.2232, -1.3546, -2.7111],
         [ 1.4072, -0.0253,  0.6254,  1.4726,  0.1286],
         [-0.6272, -2.1368, -1.4506, -0.6812, -1.9316],
         [-1.4275, -2.7195, -2.1522, -1.2064, -2.5096],
         [ 1.6694,  0.2405,  0.9105,  1.6429,  0.4678]]],
       grad_fn=<AddBackward0>)
next_score: tensor([[3.4198, 0.8364, 3.7516, 2.6723, 3.1709],
        [1.6694, 0.2405, 0.9105, 1.6429, 0.4678]], grad_fn=<MaxBackward0>)
indices: tensor([[4, 4, 4, 4, 4],
        [4, 4, 4, 4, 4]])
score: tensor([[3.4198, 0.8364, 3.7516, 2.6723, 3.1709],
        [1.6694, 0.2405, 0.9105, 1.6429, 0.4678]], grad_fn=<WhereBackward0>)
score: tensor([[3.4249, 0.7728, 3.6629, 2.6182, 3.0763],
        [1.6745, 0.1770, 0.8218, 1.5889, 0.3731]], grad_fn=<AddBackward0>)
seq_ends: tensor([2, 2])
0 :best_last_tag: tensor(2)
0 :best_tags: [2]
hist: tensor([[4, 4, 4, 4, 4],
        [4, 4, 4, 4, 4]])
best_last_tag: tensor(4)
hist: tensor([[4, 4, 4, 4, 4],
        [0, 0, 0, 0, 0]])
best_last_tag: tensor(4)
best_tags.reverse(): [4, 4, 2]
best_tags_list: [[4, 4, 2]]
1 :best_last_tag: tensor(0)
1 :best_tags: [0]
hist: tensor([[4, 4, 4, 4, 4],
        [4, 4, 4, 4, 4]])
best_last_tag: tensor(4)
hist: tensor([[4, 4, 4, 4, 4],
        [0, 0, 0, 0, 0]])
best_last_tag: tensor(0)
best_tags.reverse(): [0, 4, 0]
best_tags_list: [[4, 4, 2], [0, 4, 0]]
[[4, 4, 2], [0, 4, 0]]
