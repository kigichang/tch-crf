starts: Parameter containing:
tensor([-0.0579, -0.0496, -0.0710, -0.0734,  0.0341], requires_grad=True)
transitions: Parameter containing:
tensor([[ 0.0657,  0.0745,  0.0158,  0.0118,  0.0006],
        [ 0.0388,  0.0191, -0.0075, -0.0740,  0.0204],
        [ 0.0116, -0.0147, -0.0462,  0.0784, -0.0037],
        [-0.0215,  0.0935,  0.0649,  0.0946,  0.0573],
        [-0.0048, -0.0320,  0.0051,  0.0460,  0.0511]], requires_grad=True)
ends: Parameter containing:
tensor([-0.0785,  0.0676,  0.0347,  0.0093,  0.0864], requires_grad=True)
emissions: tensor([[[-0.6094,  0.4727, -0.2072,  0.8678, -0.3666],
         [-0.5847,  0.8231,  2.2543, -1.8335, -1.5335]],

        [[ 0.6712, -0.6021, -0.0490,  0.8836, -0.8548],
         [ 1.1375, -0.0518, -2.1887, -0.9732, -0.0702]],

        [[-0.2326,  2.0694, -1.0252,  1.3830,  0.5637],
         [ 2.7534, -0.3950,  1.4539, -0.7752, -0.7997]]])
tags: tensor([[0, 1],
        [2, 4],
        [3, 1]])
mask: tensor([[1, 1],
        [1, 1],
        [1, 1]], dtype=torch.uint8)
score: tensor([-0.0579, -0.0496], grad_fn=<IndexBackward0>)
score: tensor([-0.6673,  0.7735], grad_fn=<AddBackward0>)
tags[i - 1]: tensor([0, 1])
tags[i]: tensor([2, 4])
transitions[tags[i - 1], tags[i]] tensor([0.0158, 0.0204], grad_fn=<IndexBackward0>)
mask[i]: tensor([1., 1.])
score: tensor([-0.6515,  0.7939], grad_fn=<AddBackward0>)
emissions[i, torch.arange(batch_size), tags[i]] tensor([-0.0490, -0.0702])
score: tensor([-0.7005,  0.7237], grad_fn=<AddBackward0>)
tags[i - 1]: tensor([2, 4])
tags[i]: tensor([3, 1])
transitions[tags[i - 1], tags[i]] tensor([ 0.0784, -0.0320], grad_fn=<IndexBackward0>)
mask[i]: tensor([1., 1.])
score: tensor([-0.6221,  0.6917], grad_fn=<AddBackward0>)
emissions[i, torch.arange(batch_size), tags[i]] tensor([ 1.3830, -0.3950])
score: tensor([0.7609, 0.2967], grad_fn=<AddBackward0>)
seq_ends: tensor([2, 2])
last_tags: tensor([3, 1])
self.end_transitions[last_tags] tensor([0.0093, 0.0676], grad_fn=<IndexBackward0>)
score: tensor([0.7703, 0.3643], grad_fn=<AddBackward0>)
-------------------- compute normalizer --------------------
starts: Parameter containing:
tensor([-0.0579, -0.0496, -0.0710, -0.0734,  0.0341], requires_grad=True)
transitions: Parameter containing:
tensor([[ 0.0657,  0.0745,  0.0158,  0.0118,  0.0006],
        [ 0.0388,  0.0191, -0.0075, -0.0740,  0.0204],
        [ 0.0116, -0.0147, -0.0462,  0.0784, -0.0037],
        [-0.0215,  0.0935,  0.0649,  0.0946,  0.0573],
        [-0.0048, -0.0320,  0.0051,  0.0460,  0.0511]], requires_grad=True)
ends: Parameter containing:
tensor([-0.0785,  0.0676,  0.0347,  0.0093,  0.0864], requires_grad=True)
emissions: tensor([[[-0.6094,  0.4727, -0.2072,  0.8678, -0.3666],
         [-0.5847,  0.8231,  2.2543, -1.8335, -1.5335]],

        [[ 0.6712, -0.6021, -0.0490,  0.8836, -0.8548],
         [ 1.1375, -0.0518, -2.1887, -0.9732, -0.0702]],

        [[-0.2326,  2.0694, -1.0252,  1.3830,  0.5637],
         [ 2.7534, -0.3950,  1.4539, -0.7752, -0.7997]]])
mask: tensor([[1, 1],
        [1, 1],
        [1, 1]], dtype=torch.uint8)
score: tensor([[-0.6673,  0.4231, -0.2782,  0.7944, -0.3325],
        [-0.6426,  0.7735,  2.1833, -1.9069, -1.4995]], grad_fn=<AddBackward0>)
broadcast_score: tensor([[[-0.6673],
         [ 0.4231],
         [-0.2782],
         [ 0.7944],
         [-0.3325]],

        [[-0.6426],
         [ 0.7735],
         [ 2.1833],
         [-1.9069],
         [-1.4995]]], grad_fn=<UnsqueezeBackward0>)
broadcast_emissions: tensor([[[ 0.6712, -0.6021, -0.0490,  0.8836, -0.8548]],

        [[ 1.1375, -0.0518, -2.1887, -0.9732, -0.0702]]])
next_score: tensor([[[ 6.9632e-02, -1.1948e+00, -7.0051e-01,  2.2812e-01, -1.5215e+00],
         [ 1.1331e+00, -1.5986e-01,  3.6658e-01,  1.2327e+00, -4.1133e-01],
         [ 4.0455e-01, -8.9494e-01, -3.7347e-01,  6.8380e-01, -1.1367e+00],
         [ 1.4441e+00,  2.8579e-01,  8.1032e-01,  1.7726e+00, -3.1003e-03],
         [ 3.3386e-01, -9.6659e-01, -3.7650e-01,  5.9710e-01, -1.1362e+00]],

        [[ 5.6060e-01, -6.1987e-01, -2.8154e+00, -1.6040e+00, -7.1226e-01],
         [ 1.9498e+00,  7.4079e-01, -1.4226e+00, -2.7372e-01,  7.2367e-01],
         [ 3.3323e+00,  2.1168e+00, -5.1591e-02,  1.2885e+00,  2.1094e+00],
         [-7.9095e-01, -1.8653e+00, -4.0306e+00, -2.7855e+00, -1.9198e+00],
         [-3.6679e-01, -1.5833e+00, -3.6831e+00, -2.4266e+00, -1.5186e+00]]],
       grad_fn=<AddBackward0>)
next_score: tensor([[2.4257, 1.1863, 1.7160, 2.6652, 0.9242],
        [3.6357, 2.4248, 0.2574, 1.5558, 2.4125]],
       grad_fn=<LogsumexpBackward0>)
score: tensor([[-0.6673,  0.4231, -0.2782,  0.7944, -0.3325],
        [-0.6426,  0.7735,  2.1833, -1.9069, -1.4995]], grad_fn=<AddBackward0>)
mask[i].unsqueeze(1): tensor([[1],
        [1]], dtype=torch.uint8)
score: tensor([[2.4257, 1.1863, 1.7160, 2.6652, 0.9242],
        [3.6357, 2.4248, 0.2574, 1.5558, 2.4125]], grad_fn=<WhereBackward0>)
broadcast_score: tensor([[[2.4257],
         [1.1863],
         [1.7160],
         [2.6652],
         [0.9242]],

        [[3.6357],
         [2.4248],
         [0.2574],
         [1.5558],
         [2.4125]]], grad_fn=<UnsqueezeBackward0>)
broadcast_emissions: tensor([[[-0.2326,  2.0694, -1.0252,  1.3830,  0.5637]],

        [[ 2.7534, -0.3950,  1.4539, -0.7752, -0.7997]]])
next_score: tensor([[[ 2.2588,  4.5696,  1.4163,  3.8205,  2.9900],
         [ 0.9925,  3.2747,  0.1535,  2.4953,  1.7703],
         [ 1.4950,  3.7707,  0.6446,  3.1775,  2.2760],
         [ 2.4111,  4.8280,  1.7049,  4.1428,  3.2862],
         [ 0.6869,  2.9616, -0.0959,  2.3533,  1.5391]],

        [[ 6.4548,  3.3153,  5.1054,  2.8723,  2.8366],
         [ 5.2170,  2.0490,  3.8712,  1.5756,  1.6455],
         [ 3.0224, -0.1522,  1.6651, -0.4394, -0.5459],
         [ 4.2877,  1.2543,  3.0747,  0.8752,  0.8135],
         [ 5.1610,  1.9855,  3.8714,  1.6833,  1.6639]]],
       grad_fn=<AddBackward0>)
next_score: tensor([[3.3966, 5.7387, 2.6102, 5.0450, 4.2032],
        [6.9919, 3.8488, 5.6624, 3.4320, 3.4130]],
       grad_fn=<LogsumexpBackward0>)
score: tensor([[2.4257, 1.1863, 1.7160, 2.6652, 0.9242],
        [3.6357, 2.4248, 0.2574, 1.5558, 2.4125]], grad_fn=<WhereBackward0>)
mask[i].unsqueeze(1): tensor([[1],
        [1]], dtype=torch.uint8)
score: tensor([[3.3966, 5.7387, 2.6102, 5.0450, 4.2032],
        [6.9919, 3.8488, 5.6624, 3.4320, 3.4130]], grad_fn=<WhereBackward0>)
score: tensor([[3.3181, 5.8062, 2.6450, 5.0543, 4.2895],
        [6.9134, 3.9164, 5.6972, 3.4413, 3.4994]], grad_fn=<AddBackward0>)
result: tensor([6.4030, 7.2572], grad_fn=<LogsumexpBackward0>)
tensor(-12.5257, grad_fn=<SumBackward0>)
