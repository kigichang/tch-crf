starts: Parameter containing:
tensor([0.0721, 0.0647, 0.0635, 0.0241, 0.0138], requires_grad=True)
transitions: Parameter containing:
tensor([[ 0.0503, -0.0852,  0.0337, -0.0265, -0.0253],
        [-0.0260, -0.0432, -0.0967,  0.0159, -0.0948],
        [ 0.0281, -0.0584,  0.0220,  0.0513, -0.0776],
        [ 0.0744, -0.0871, -0.0868,  0.0352, -0.0623],
        [ 0.0557, -0.0398, -0.0728,  0.0885, -0.0550]], requires_grad=True)
ends: Parameter containing:
tensor([-0.0683, -0.0402, -0.0845,  0.0687,  0.0390], requires_grad=True)
emissions: tensor([[[ 8.6650e-01,  2.4597e-04,  2.0829e-02,  8.4212e-01, -1.2449e+00],
         [-1.4552e+00,  1.2671e+00,  2.9977e-01,  1.1466e-01,  9.0354e-01]],

        [[-1.6154e-01, -1.6771e+00,  1.4930e-01,  1.0492e+00, -4.1633e-01],
         [-1.4435e+00, -5.3841e-01,  3.5371e-02, -9.0128e-01, -9.0109e-01]],

        [[ 1.5290e-01, -4.3121e-01,  3.7445e-01,  5.5888e-01,  3.4212e+00],
         [-3.0604e-02, -1.3140e+00, -9.2333e-01,  1.2116e+00,  1.7317e+00]]])
tags: tensor([[0, 1],
        [2, 4],
        [3, 1]])
mask: tensor([[1, 1],
        [1, 1],
        [1, 1]], dtype=torch.uint8)
score: tensor([0.0721, 0.0647], grad_fn=<IndexBackward0>)
score: tensor([0.9386, 1.3319], grad_fn=<AddBackward0>)
tags[i - 1]: tensor([0, 1])
tags[i]: tensor([2, 4])
transitions[tags[i - 1], tags[i]] tensor([ 0.0337, -0.0948], grad_fn=<IndexBackward0>)
mask[i]: tensor([1., 1.])
score: tensor([0.9723, 1.2371], grad_fn=<AddBackward0>)
emissions[i, torch.arange(batch_size), tags[i]] tensor([ 0.1493, -0.9011])
score: tensor([1.1216, 0.3360], grad_fn=<AddBackward0>)
tags[i - 1]: tensor([2, 4])
tags[i]: tensor([3, 1])
transitions[tags[i - 1], tags[i]] tensor([ 0.0513, -0.0398], grad_fn=<IndexBackward0>)
mask[i]: tensor([1., 1.])
score: tensor([1.1729, 0.2962], grad_fn=<AddBackward0>)
emissions[i, torch.arange(batch_size), tags[i]] tensor([ 0.5589, -1.3140])
score: tensor([ 1.7318, -1.0179], grad_fn=<AddBackward0>)
seq_ends: tensor([2, 2])
last_tags: tensor([3, 1])
self.end_transitions[last_tags] tensor([ 0.0687, -0.0402], grad_fn=<IndexBackward0>)
score: tensor([ 1.8005, -1.0580], grad_fn=<AddBackward0>)
-------------------- compute normalizer --------------------
starts: Parameter containing:
tensor([0.0721, 0.0647, 0.0635, 0.0241, 0.0138], requires_grad=True)
transitions: Parameter containing:
tensor([[ 0.0503, -0.0852,  0.0337, -0.0265, -0.0253],
        [-0.0260, -0.0432, -0.0967,  0.0159, -0.0948],
        [ 0.0281, -0.0584,  0.0220,  0.0513, -0.0776],
        [ 0.0744, -0.0871, -0.0868,  0.0352, -0.0623],
        [ 0.0557, -0.0398, -0.0728,  0.0885, -0.0550]], requires_grad=True)
ends: Parameter containing:
tensor([-0.0683, -0.0402, -0.0845,  0.0687,  0.0390], requires_grad=True)
emissions: tensor([[[ 8.6650e-01,  2.4597e-04,  2.0829e-02,  8.4212e-01, -1.2449e+00],
         [-1.4552e+00,  1.2671e+00,  2.9977e-01,  1.1466e-01,  9.0354e-01]],

        [[-1.6154e-01, -1.6771e+00,  1.4930e-01,  1.0492e+00, -4.1633e-01],
         [-1.4435e+00, -5.3841e-01,  3.5371e-02, -9.0128e-01, -9.0109e-01]],

        [[ 1.5290e-01, -4.3121e-01,  3.7445e-01,  5.5888e-01,  3.4212e+00],
         [-3.0604e-02, -1.3140e+00, -9.2333e-01,  1.2116e+00,  1.7317e+00]]])
mask: tensor([[1, 1],
        [1, 1],
        [1, 1]], dtype=torch.uint8)
score: tensor([[ 0.9386,  0.0650,  0.0843,  0.8662, -1.2311],
        [-1.3831,  1.3319,  0.3632,  0.1387,  0.9174]], grad_fn=<AddBackward0>)
broadcast_score: tensor([[[ 0.9386],
         [ 0.0650],
         [ 0.0843],
         [ 0.8662],
         [-1.2311]],

        [[-1.3831],
         [ 1.3319],
         [ 0.3632],
         [ 0.1387],
         [ 0.9174]]], grad_fn=<UnsqueezeBackward0>)
broadcast_emissions: tensor([[[-0.1615, -1.6771,  0.1493,  1.0492, -0.4163]],

        [[-1.4435, -0.5384,  0.0354, -0.9013, -0.9011]]])
next_score: tensor([[[ 0.8273, -0.8237,  1.1216,  1.9613,  0.4970],
         [-0.1226, -1.6553,  0.1176,  1.1301, -0.4462],
         [-0.0492, -1.6512,  0.2555,  1.1848, -0.4097],
         [ 0.7791, -0.8980,  0.9287,  1.9506,  0.3876],
         [-1.3369, -2.9480, -1.1546, -0.0935, -1.7024]],

        [[-2.7764, -2.0067, -1.3141, -2.3109, -2.3095],
         [-0.1377,  0.7503,  1.2705,  0.4465,  0.3360],
         [-1.0522, -0.2336,  0.4206, -0.4868, -0.6155],
         [-1.2304, -0.4868,  0.0873, -0.7273, -0.8247],
         [-0.4704,  0.3391,  0.8800,  0.1046, -0.0387]]],
       grad_fn=<AddBackward0>)
next_score: tensor([[1.8819, 0.2480, 2.1201, 3.0642, 1.5268],
        [0.7883, 1.6218, 2.1811, 1.3533, 1.2353]],
       grad_fn=<LogsumexpBackward0>)
score: tensor([[ 0.9386,  0.0650,  0.0843,  0.8662, -1.2311],
        [-1.3831,  1.3319,  0.3632,  0.1387,  0.9174]], grad_fn=<AddBackward0>)
mask[i].unsqueeze(1): tensor([[1],
        [1]], dtype=torch.uint8)
score: tensor([[1.8819, 0.2480, 2.1201, 3.0642, 1.5268],
        [0.7883, 1.6218, 2.1811, 1.3533, 1.2353]], grad_fn=<WhereBackward0>)
broadcast_score: tensor([[[1.8819],
         [0.2480],
         [2.1201],
         [3.0642],
         [1.5268]],

        [[0.7883],
         [1.6218],
         [2.1811],
         [1.3533],
         [1.2353]]], grad_fn=<UnsqueezeBackward0>)
broadcast_emissions: tensor([[[ 0.1529, -0.4312,  0.3744,  0.5589,  3.4212]],

        [[-0.0306, -1.3140, -0.9233,  1.2116,  1.7317]]])
next_score: tensor([[[ 2.0851,  1.3655,  2.2900,  2.4143,  5.2778],
         [ 0.3749, -0.2264,  0.5258,  0.8228,  3.5744],
         [ 2.3011,  1.6305,  2.5165,  2.7303,  5.4637],
         [ 3.2915,  2.5459,  3.3518,  3.6583,  6.4231],
         [ 1.7354,  1.0558,  1.8285,  2.1741,  4.8930]],

        [[ 0.8080, -0.6109, -0.1013,  1.9734,  2.4948],
         [ 1.5651,  0.2645,  0.6018,  2.8493,  3.2587],
         [ 2.1786,  0.8087,  1.2798,  3.4440,  3.8352],
         [ 1.3971, -0.0479,  0.3431,  2.6001,  3.0227],
         [ 1.2604, -0.1185,  0.2392,  2.5354,  2.9121]]],
       grad_fn=<AddBackward0>)
next_score: tensor([[3.9520, 3.2367, 4.0730, 4.3358, 7.1040],
        [3.1541, 1.7804, 2.1977, 4.4052, 4.8153]],
       grad_fn=<LogsumexpBackward0>)
score: tensor([[1.8819, 0.2480, 2.1201, 3.0642, 1.5268],
        [0.7883, 1.6218, 2.1811, 1.3533, 1.2353]], grad_fn=<WhereBackward0>)
mask[i].unsqueeze(1): tensor([[1],
        [1]], dtype=torch.uint8)
score: tensor([[3.9520, 3.2367, 4.0730, 4.3358, 7.1040],
        [3.1541, 1.7804, 2.1977, 4.4052, 4.8153]], grad_fn=<WhereBackward0>)
score: tensor([[3.8837, 3.1966, 3.9884, 4.4045, 7.1430],
        [3.0857, 1.7402, 2.1132, 4.4739, 4.8542]], grad_fn=<AddBackward0>)
result: tensor([7.2957, 5.5288], grad_fn=<LogsumexpBackward0>)
reduction: token_mean
llh: tensor([-5.4953, -6.5868], grad_fn=<SubBackward0>)
mask.float().sum(): tensor(6.)
llh.sum() tensor(-12.0821, grad_fn=<SumBackward0>)
tensor(-2.0137, grad_fn=<DivBackward0>)
